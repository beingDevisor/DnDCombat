/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package dndcombat;

import java.util.ArrayList;
import java.util.Collections;
import javax.swing.DefaultListModel;
import javax.swing.JFrame;
import javax.swing.JOptionPane;

/**
 *
 * @author icecr
 */
public class EncounterWindow extends javax.swing.JFrame {

    Model model;
    MainWindow mainWindow;
    DefaultListModel initiativeList = new DefaultListModel();
    DefaultListModel playerInventory = new DefaultListModel();
    ArrayList<Character> initiativeOrder = new ArrayList<>();

    int turn;
    int characterTurnIndex;

    /**
     * Creates new form EncounterWindow
     */
    public EncounterWindow(Model model, MainWindow mainWindow) {
        initComponents();
        this.model = model;
        this.mainWindow = mainWindow;

        this.turn = 1;

        //Get each player's initiative
        for (Player player : model.getParty()) {
            while (player.getInitiative() == -1) {
                JFrame frame = new JFrame();
                String input = JOptionPane.showInputDialog(frame, "Enter " + player.getName() + "'s initiative:");
                if (isInteger(input)) {
                    player.setInitiative(Integer.parseInt(input));
                }
            }
            initiativeOrder.add(player);
        }

        //Import party to initiative list
        initiativeList.clear();

        Collections.sort(initiativeOrder);
        //Backwards version
        //for (int i = initiativeOrder.size() - 1; i > -1; i--) {
        //    initiativeList.addElement(initiativeOrder.get(i).getName());
        //}
        for (Character character : initiativeOrder) {
            initiativeList.addElement(character.getName());
        }

        //Old sort code for initiative list
        /*
        ArrayList<Player> partyCopy = new ArrayList<>();
        
        for (Player player : model.getParty()) {
            partyCopy.add(player);
        }
        
        int largestInit = -1;
        Player largestInitPlayer = null;
        while (!partyCopy.isEmpty()) {
            for (Player player : partyCopy) {
                if (player.getInitiative() > largestInit) {
                    largestInit = player.getInitiative();
                    largestInitPlayer = player;
                }
            }
            initiativeOrder.add(largestInitPlayer);
            largestInit = -1;
            partyCopy.remove(largestInitPlayer);
        }
        
        for (Character player : initiativeOrder) {
            initiativeList.addElement(player.getName());
        }
         */
        //Initialize turn number and player turn
        jTurnLabel.setText("Turn: " + this.turn);
        jPlayerTurnLabel.setText(initiativeList.get(0) + "'s Turn");
        characterTurnIndex = 0;

        //Disposes when X button clicked instead of closing whole application
        this.setDefaultCloseOperation(JFrame.DO_NOTHING_ON_CLOSE);
        this.addWindowListener(new java.awt.event.WindowAdapter() {
            @Override
            public void windowClosing(java.awt.event.WindowEvent e) {
                //System.out.println("Uncomment following to open another window!");
                //MainPage m = new MainPage();
                //m.setVisible(true);
                e.getWindow().dispose();
                //System.out.println("JFrame Closed!");
            }
        });

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        jInitiativeList = new javax.swing.JList<>(initiativeList);
        jLabel1 = new javax.swing.JLabel();
        jPlayerPanel = new javax.swing.JPanel();
        jPlayerNameLabel = new javax.swing.JLabel();
        jPlayerHealthProgressBar = new javax.swing.JProgressBar();
        jPlayerHealthLabel = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        jPlayerItemsList = new javax.swing.JList<>(playerInventory);
        jPlayerArmorClassLabel = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();
        jPlayerStrengthLabel = new javax.swing.JLabel();
        jPlayerDexterityLabel = new javax.swing.JLabel();
        jPlayerConstitutionLabel = new javax.swing.JLabel();
        jPlayerIntelligenceLabel = new javax.swing.JLabel();
        jPlayerWisdomLabel = new javax.swing.JLabel();
        jPlayerCharismaLabel = new javax.swing.JLabel();
        jPlayerClassLabel = new javax.swing.JLabel();
        jAddItemButton = new javax.swing.JButton();
        jRemoveItemButton = new javax.swing.JButton();
        jGoldLabel = new javax.swing.JLabel();
        jInitiativeLabel = new javax.swing.JLabel();
        jEndEncounterButton = new javax.swing.JButton();
        jTurnLabel = new javax.swing.JLabel();
        jPlayerTurnLabel = new javax.swing.JLabel();
        jNextTurnButton = new javax.swing.JButton();
        jAddEnemyButton = new javax.swing.JButton();
        jAttackButton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jInitiativeList.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        jInitiativeList.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                jInitiativeListValueChanged(evt);
            }
        });
        jScrollPane1.setViewportView(jInitiativeList);

        jLabel1.setText("Initiative Order");

        jPlayerPanel.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));

        jPlayerNameLabel.setText("Name");

        jPlayerHealthProgressBar.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jPlayerHealthProgressBarMouseClicked(evt);
            }
        });

        jPlayerHealthLabel.setText("0/0");
        jPlayerHealthLabel.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jPlayerHealthLabelMouseClicked(evt);
            }
        });

        jScrollPane2.setViewportView(jPlayerItemsList);

        jPlayerArmorClassLabel.setText("AC: 0");

        jPanel1.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        jPlayerStrengthLabel.setText("Str: 0");

        jPlayerDexterityLabel.setText("Dex: 0");

        jPlayerConstitutionLabel.setText("Con: 0");

        jPlayerIntelligenceLabel.setText("Int: 0");

        jPlayerWisdomLabel.setText("Wis: 0");

        jPlayerCharismaLabel.setText("Cha: 0");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPlayerStrengthLabel)
                    .addComponent(jPlayerDexterityLabel)
                    .addComponent(jPlayerCharismaLabel)
                    .addComponent(jPlayerWisdomLabel)
                    .addComponent(jPlayerIntelligenceLabel)
                    .addComponent(jPlayerConstitutionLabel))
                .addContainerGap(16, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap(15, Short.MAX_VALUE)
                .addComponent(jPlayerStrengthLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPlayerDexterityLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPlayerConstitutionLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPlayerIntelligenceLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPlayerWisdomLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPlayerCharismaLabel)
                .addContainerGap())
        );

        jPlayerClassLabel.setText("Race & Class");

        jAddItemButton.setText("Add Item");
        jAddItemButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jAddItemButtonMouseClicked(evt);
            }
        });

        jRemoveItemButton.setText("Remove Item");
        jRemoveItemButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jRemoveItemButtonMouseClicked(evt);
            }
        });

        jGoldLabel.setText("Gold: 0");
        jGoldLabel.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jGoldLabelMouseClicked(evt);
            }
        });

        jInitiativeLabel.setText("Initiative:");

        javax.swing.GroupLayout jPlayerPanelLayout = new javax.swing.GroupLayout(jPlayerPanel);
        jPlayerPanel.setLayout(jPlayerPanelLayout);
        jPlayerPanelLayout.setHorizontalGroup(
            jPlayerPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPlayerPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPlayerPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPlayerPanelLayout.createSequentialGroup()
                        .addComponent(jPlayerNameLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 137, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jPlayerClassLabel, javax.swing.GroupLayout.DEFAULT_SIZE, 127, Short.MAX_VALUE))
                    .addGroup(jPlayerPanelLayout.createSequentialGroup()
                        .addGroup(jPlayerPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jPlayerArmorClassLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(jPlayerPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jRemoveItemButton, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPlayerPanelLayout.createSequentialGroup()
                                .addComponent(jGoldLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 67, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(60, 60, 60))
                            .addComponent(jInitiativeLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 86, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(jPlayerPanelLayout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(jAddItemButton)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPlayerPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPlayerPanelLayout.createSequentialGroup()
                        .addComponent(jPlayerHealthLabel)
                        .addGap(18, 18, 18)
                        .addComponent(jPlayerHealthProgressBar, javax.swing.GroupLayout.PREFERRED_SIZE, 178, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 213, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );
        jPlayerPanelLayout.setVerticalGroup(
            jPlayerPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPlayerPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPlayerPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jPlayerHealthProgressBar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPlayerPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jPlayerNameLabel)
                        .addComponent(jPlayerHealthLabel)
                        .addComponent(jPlayerClassLabel)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPlayerPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPlayerPanelLayout.createSequentialGroup()
                        .addGroup(jPlayerPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jPlayerArmorClassLabel)
                            .addComponent(jGoldLabel))
                        .addGroup(jPlayerPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPlayerPanelLayout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addGap(23, 23, 23))
                            .addGroup(jPlayerPanelLayout.createSequentialGroup()
                                .addGap(16, 16, 16)
                                .addComponent(jInitiativeLabel)
                                .addGap(0, 0, Short.MAX_VALUE))))
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPlayerPanelLayout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(jAddItemButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jRemoveItemButton)))
                .addContainerGap())
        );

        jEndEncounterButton.setText("End Encounter");
        jEndEncounterButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jEndEncounterButtonMouseClicked(evt);
            }
        });

        jTurnLabel.setText("Turn:");

        jPlayerTurnLabel.setText("<Player>'s Turn");

        jNextTurnButton.setText("Next Turn");
        jNextTurnButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jNextTurnButtonMouseClicked(evt);
            }
        });

        jAddEnemyButton.setText("Add Enemy/NPC");
        jAddEnemyButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jAddEnemyButtonMouseClicked(evt);
            }
        });

        jAttackButton.setText("Attack Selected Character");
        jAttackButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jAttackButtonMouseClicked(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(42, 42, 42)
                        .addComponent(jLabel1))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(15, 15, 15)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 145, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(38, 38, 38)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jPlayerTurnLabel)
                                .addGap(18, 18, 18)
                                .addComponent(jNextTurnButton))
                            .addComponent(jTurnLabel)
                            .addComponent(jAttackButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 77, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jPlayerPanel, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jEndEncounterButton, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 135, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jAddEnemyButton, javax.swing.GroupLayout.PREFERRED_SIZE, 145, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jPlayerPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jEndEncounterButton)
                            .addComponent(jAddEnemyButton, javax.swing.GroupLayout.PREFERRED_SIZE, 44, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel1)
                            .addComponent(jTurnLabel))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 452, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jPlayerTurnLabel)
                                    .addComponent(jNextTurnButton))
                                .addGap(51, 51, 51)
                                .addComponent(jAttackButton, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                .addGap(6, 6, 6))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jAddItemButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jAddItemButtonMouseClicked
        if (jInitiativeList.isSelectionEmpty()) {
            return;
        }

        //Add item
        JFrame frame = new JFrame();
        String itemName = JOptionPane.showInputDialog(frame, "Enter item name:");
        model.getParty().get(jInitiativeList.getSelectedIndex()).addToInventory(itemName);

        //Reset Inventory display
        playerInventory.clear();
        for (String item : model.getParty().get(jInitiativeList.getSelectedIndex()).getInventory()) {
            playerInventory.addElement(item);
        }
    }//GEN-LAST:event_jAddItemButtonMouseClicked

    private void jRemoveItemButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jRemoveItemButtonMouseClicked
        if (jPlayerItemsList.isSelectionEmpty()) {
            return;
        }
        if (jInitiativeList.isSelectionEmpty()) {
            return;
        }
        model.getParty().get(jInitiativeList.getSelectedIndex()).removeFromInventory(jPlayerItemsList.getSelectedValue());

        //Reset inventory display
        playerInventory.clear();
        for (String item : model.getParty().get(jInitiativeList.getSelectedIndex()).getInventory()) {
            playerInventory.addElement(item);
        }
    }//GEN-LAST:event_jRemoveItemButtonMouseClicked

    private void jGoldLabelMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jGoldLabelMouseClicked
        if (jInitiativeList.isSelectionEmpty()) {
            return;
        }
        if (initiativeOrder.get(jInitiativeList.getSelectedIndex()) instanceof NPC) {
            return;
        }
        JFrame frame = new JFrame();
        String input = JOptionPane.showInputDialog(frame, "Enter gold to give (negative to take):");
        boolean isNegative = false;
        if (input.charAt(0) == '-') {
            input = input.substring(1);
            isNegative = true;
        }
        Player temp = (Player) initiativeOrder.get(jInitiativeList.getSelectedIndex());
        if (isInteger(input)) {
            int amount = Integer.parseInt(input);
            if (isNegative) {
                temp.setGold(temp.getGold() - amount);
            } else {
                temp.setGold(temp.getGold() + amount);
            }
            jGoldLabel.setText("Gold: " + temp.getGold());
        }
    }//GEN-LAST:event_jGoldLabelMouseClicked

    private void jEndEncounterButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jEndEncounterButtonMouseClicked
        for (Player player : model.getParty()) {
            player.setInitiative(-1);
        }
        this.dispose();
    }//GEN-LAST:event_jEndEncounterButtonMouseClicked

    private void jAddEnemyButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jAddEnemyButtonMouseClicked
        NewEnemyWindow newEnemyWindow = new NewEnemyWindow(model, this);
        newEnemyWindow.setVisible(true);
    }//GEN-LAST:event_jAddEnemyButtonMouseClicked

    private void jInitiativeListValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_jInitiativeListValueChanged
        // Display stats for selected character

        if (jInitiativeList.isSelectionEmpty()) {
            jPlayerNameLabel.setText("-");
            jPlayerClassLabel.setText("-");
            jPlayerHealthLabel.setText("- / -");
            jPlayerHealthProgressBar.setMinimum(0);
            jPlayerHealthProgressBar.setMaximum(0);
            jPlayerHealthProgressBar.setValue(0);
            jGoldLabel.setText("-");
            jInitiativeLabel.setText("-");
            jPlayerArmorClassLabel.setText("-");
            jPlayerStrengthLabel.setText("Str: -");
            jPlayerDexterityLabel.setText("Dex: -");
            jPlayerConstitutionLabel.setText("Con: -");
            jPlayerIntelligenceLabel.setText("Int: -");
            jPlayerWisdomLabel.setText("Wis: -");
            jPlayerCharismaLabel.setText("Cha: -");
            playerInventory.clear();
            return;
        }

        Character temp = initiativeOrder.get(jInitiativeList.getSelectedIndex());

        //Name
        jPlayerNameLabel.setText(temp.getName());

        //Player Stats
        if (initiativeOrder.get(jInitiativeList.getSelectedIndex()) instanceof Player) {

            //Race & Class
            Player castShit = (Player) initiativeOrder.get(jInitiativeList.getSelectedIndex());
            jPlayerClassLabel.setText(castShit.getRace() + " " + castShit.getPlayerClass());

            //Gold
            jGoldLabel.setText("Gold: " + castShit.getGold());

            //AbilityScores
            jPlayerStrengthLabel.setText("Str: " + castShit.getStrength());
            jPlayerDexterityLabel.setText("Dex: " + castShit.getDexterity());
            jPlayerConstitutionLabel.setText("Con: " + castShit.getConstitution());
            jPlayerIntelligenceLabel.setText("Int: " + castShit.getIntelligence());
            jPlayerWisdomLabel.setText("Wis: " + castShit.getWisdom());
            jPlayerCharismaLabel.setText("Cha: " + castShit.getCharisma());

        } else { //NPC Stats

            jPlayerClassLabel.setText("-");
            jGoldLabel.setText("-");

            jPlayerStrengthLabel.setText("Str: -");
            jPlayerDexterityLabel.setText("Dex: -");
            jPlayerConstitutionLabel.setText("Con: -");
            jPlayerIntelligenceLabel.setText("Int: -");
            jPlayerWisdomLabel.setText("Wis: -");
            jPlayerCharismaLabel.setText("Cha: -");

        }

        //Health
        jPlayerHealthLabel.setText(Integer.toString(temp.getHealth()) + "/" + Integer.toString(temp.getMaxHealth()));
        //Health bar
        jPlayerHealthProgressBar.setMinimum(0);
        jPlayerHealthProgressBar.setMaximum(temp.getMaxHealth());
        jPlayerHealthProgressBar.setValue(temp.getHealth());

        //AC
        jPlayerArmorClassLabel.setText("AC: " + Integer.toString(temp.getArmorClass()));

        //Inventory
        playerInventory.clear();
        for (String item : temp.getInventory()) {
            playerInventory.addElement(item);
        }

        //Initiative
        jInitiativeLabel.setText("Initiative: " + Integer.toString(temp.getInitiative()));
    }//GEN-LAST:event_jInitiativeListValueChanged

    private void jNextTurnButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jNextTurnButtonMouseClicked
        characterTurnIndex++;
        if (characterTurnIndex == initiativeOrder.size()) {
            characterTurnIndex = 0;
            turn++;
        }

        //Update display
        jTurnLabel.setText("Turn: " + turn);
        jPlayerTurnLabel.setText(initiativeList.get(characterTurnIndex) + "'s Turn");

    }//GEN-LAST:event_jNextTurnButtonMouseClicked

    private void jAttackButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jAttackButtonMouseClicked
        if (jInitiativeList.isSelectionEmpty()) {
            return;
        }
        Character victim = initiativeOrder.get(jInitiativeList.getSelectedIndex());
        int rollToHit = -1;
        try {
            rollToHit = Integer.parseInt(JOptionPane.showInputDialog(null, "Roll to hit (AC: " + victim.getArmorClass() + ")"));

            if (rollToHit < victim.getArmorClass()) {
                JOptionPane.showMessageDialog(null, "Unsuccessful attack.");
                return;
            }
            int damage = Integer.parseInt(JOptionPane.showInputDialog(null, "Roll for damage:"));

            victim.setHealth(victim.getHealth() - damage);

            //Update display
            //Health
            jPlayerHealthLabel.setText(Integer.toString(victim.getHealth()) + "/" + Integer.toString(victim.getMaxHealth()));
            //Health bar
            jPlayerHealthProgressBar.setMinimum(0);
            jPlayerHealthProgressBar.setMaximum(victim.getMaxHealth());
            jPlayerHealthProgressBar.setValue(victim.getHealth());

        } catch (Exception ex) {
            System.out.println("Error: " + ex);
        }
    }//GEN-LAST:event_jAttackButtonMouseClicked

    private void jPlayerHealthLabelMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jPlayerHealthLabelMouseClicked
        if (jInitiativeList.isSelectionEmpty()) {
            return;
        }
        Character character = initiativeOrder.get(jInitiativeList.getSelectedIndex());
        String input = JOptionPane.showInputDialog(null, "Enter healing amount (negative to damage):");
        boolean isNegative = false;
        if (input.charAt(0) == '-') {
            input = input.substring(1);
            isNegative = true;
        }
        if (isInteger(input)) {
            int amount = Integer.parseInt(input);
            if (isNegative) {
                character.setHealth(character.getHealth() - amount);
            } else {
                character.setHealth(character.getHealth() + amount);
            }

            //Refresh display
            jPlayerHealthLabel.setText(Integer.toString(character.getHealth()) + "/" + Integer.toString(character.getMaxHealth()));
            //Health bar
            jPlayerHealthProgressBar.setMinimum(0);
            jPlayerHealthProgressBar.setMaximum(character.getMaxHealth());
            jPlayerHealthProgressBar.setValue(character.getHealth());
        }
    }//GEN-LAST:event_jPlayerHealthLabelMouseClicked

    private void jPlayerHealthProgressBarMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jPlayerHealthProgressBarMouseClicked
        if (jInitiativeList.isSelectionEmpty()) {
            return;
        }
        Character character = initiativeOrder.get(jInitiativeList.getSelectedIndex());
        String input = JOptionPane.showInputDialog(null, "Enter healing amount (negative to damage):");
        boolean isNegative = false;
        if (input.charAt(0) == '-') {
            input = input.substring(1);
            isNegative = true;
        }
        if (isInteger(input)) {
            int amount = Integer.parseInt(input);
            if (isNegative) {
                character.setHealth(character.getHealth() - amount);
            } else {
                character.setHealth(character.getHealth() + amount);
            }

            //Refresh display
            jPlayerHealthLabel.setText(Integer.toString(character.getHealth()) + "/" + Integer.toString(character.getMaxHealth()));
            //Health bar
            jPlayerHealthProgressBar.setMinimum(0);
            jPlayerHealthProgressBar.setMaximum(character.getMaxHealth());
            jPlayerHealthProgressBar.setValue(character.getHealth());
        }
    }//GEN-LAST:event_jPlayerHealthProgressBarMouseClicked

    public void addNPC(NPC npc) {
        initiativeOrder.add(npc);
        Collections.sort(initiativeOrder);
        initiativeList.clear();

        for (Character character : initiativeOrder) {
            initiativeList.addElement(character.getName());
        }

        //Backwards version
        //for (int i = initiativeOrder.size() - 1; i > -1; i--) {
        //    initiativeList.addElement(initiativeOrder.get(i).getName());
        //}
    }

    private static boolean isInteger(String string) {
        if (string.isEmpty()) {
            return false;
        }
        char[] characters = string.toCharArray();
        for (char character : characters) {
            if (!(character == '0' || character == '1' || character == '2' || character == '3' || character == '4' || character == '5' || character == '6' || character == '7' || character == '8' || character == '9')) {
                return false;
            }
        }
        return true;
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jAddEnemyButton;
    private javax.swing.JButton jAddItemButton;
    private javax.swing.JButton jAttackButton;
    private javax.swing.JButton jEndEncounterButton;
    private javax.swing.JLabel jGoldLabel;
    private javax.swing.JLabel jInitiativeLabel;
    private javax.swing.JList<String> jInitiativeList;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JButton jNextTurnButton;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JLabel jPlayerArmorClassLabel;
    private javax.swing.JLabel jPlayerCharismaLabel;
    private javax.swing.JLabel jPlayerClassLabel;
    private javax.swing.JLabel jPlayerConstitutionLabel;
    private javax.swing.JLabel jPlayerDexterityLabel;
    private javax.swing.JLabel jPlayerHealthLabel;
    private javax.swing.JProgressBar jPlayerHealthProgressBar;
    private javax.swing.JLabel jPlayerIntelligenceLabel;
    private javax.swing.JList<String> jPlayerItemsList;
    private javax.swing.JLabel jPlayerNameLabel;
    private javax.swing.JPanel jPlayerPanel;
    private javax.swing.JLabel jPlayerStrengthLabel;
    private javax.swing.JLabel jPlayerTurnLabel;
    private javax.swing.JLabel jPlayerWisdomLabel;
    private javax.swing.JButton jRemoveItemButton;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JLabel jTurnLabel;
    // End of variables declaration//GEN-END:variables
}
